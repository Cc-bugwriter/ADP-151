// Generated by gencpp from file vaafo_msgs/State.msg
// DO NOT EDIT!


#ifndef VAAFO_MSGS_MESSAGE_STATE_H
#define VAAFO_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <vaafo_msgs/CarInfo.h>
#include <vaafo_msgs/CarInfo.h>
#include <vaafo_msgs/DetectedObject.h>

namespace vaafo_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : header()
    , state_id(0)
    , state()
    , target()
    , ego_car()
    , obstacle()  {
    }
  State_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state_id(0)
    , state(_alloc)
    , target(_alloc)
    , ego_car(_alloc)
    , obstacle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _state_id_type;
  _state_id_type state_id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::vaafo_msgs::CarInfo_<ContainerAllocator>  _target_type;
  _target_type target;

   typedef  ::vaafo_msgs::CarInfo_<ContainerAllocator>  _ego_car_type;
  _ego_car_type ego_car;

   typedef  ::vaafo_msgs::DetectedObject_<ContainerAllocator>  _obstacle_type;
  _obstacle_type obstacle;





  typedef boost::shared_ptr< ::vaafo_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vaafo_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::vaafo_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::vaafo_msgs::State > StatePtr;
typedef boost::shared_ptr< ::vaafo_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vaafo_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vaafo_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vaafo_msgs::State_<ContainerAllocator1> & lhs, const ::vaafo_msgs::State_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state_id == rhs.state_id &&
    lhs.state == rhs.state &&
    lhs.target == rhs.target &&
    lhs.ego_car == rhs.ego_car &&
    lhs.obstacle == rhs.obstacle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vaafo_msgs::State_<ContainerAllocator1> & lhs, const ::vaafo_msgs::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vaafo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vaafo_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vaafo_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vaafo_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vaafo_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vaafo_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vaafo_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vaafo_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a9ea837d4adf8b336a09be566ff791";
  }

  static const char* value(const ::vaafo_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a9ea837d4adf8bULL;
  static const uint64_t static_value2 = 0x336a09be566ff791ULL;
};

template<class ContainerAllocator>
struct DataType< ::vaafo_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vaafo_msgs/State";
  }

  static const char* value(const ::vaafo_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vaafo_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int8 state_id\n"
"std_msgs/String state\n"
"CarInfo target\n"
"CarInfo ego_car\n"
"DetectedObject obstacle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: vaafo_msgs/CarInfo\n"
"std_msgs/Header header\n"
"int32 lane_id\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist acceleration\n"
"geometry_msgs/Point s_d\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: vaafo_msgs/DetectedObject\n"
"std_msgs/Header                 header\n"
"\n"
"uint32                          id\n"
"string                          label\n"
"float32                         score   #Score as defined by the detection, Optional\n"
"std_msgs/ColorRGBA              color   # Define this object specific color\n"
"bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering\n"
"\n"
"################ 3D BB\n"
"string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines\n"
"geometry_msgs/Pose              pose\n"
"geometry_msgs/Vector3           dimensions\n"
"geometry_msgs/Vector3           variance\n"
"geometry_msgs/Twist             velocity\n"
"geometry_msgs/Twist             acceleration\n"
"int32                           lane_id # the lane that the object is\n"
"geometry_msgs/Point             s_d # s and d value along the road\n"
"\n"
"sensor_msgs/PointCloud2         pointcloud\n"
"\n"
"geometry_msgs/PolygonStamped    convex_hull\n"
"vaafo_msgs/Lane                 predicted_trajectory\n"
"\n"
"bool                            pose_reliable\n"
"bool                            velocity_reliable\n"
"bool                            acceleration_reliable\n"
"\n"
"############### 2D Rect\n"
"string                          image_frame # Image coordinate Frame,        Required if x,y,w,h defined\n"
"int32                           x           # X coord in image space(pixel) of the initial point of the Rect\n"
"int32                           y           # Y coord in image space(pixel) of the initial point of the Rect\n"
"int32                           width       # Width of the Rect in pixels\n"
"int32                           height      # Height of the Rect in pixels\n"
"float32                         angle       # Angle [0 to 2*PI), allow rotated rects\n"
"\n"
"sensor_msgs/Image               roi_image\n"
"\n"
"############### Indicator information\n"
"uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3\n"
"\n"
"############### Behavior State of the Detected Object\n"
"uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6\n"
"\n"
"#\n"
"float32[]                        diff_alpha\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PolygonStamped\n"
"# This represents a Polygon with reference coordinate frame and timestamp\n"
"Header header\n"
"Polygon polygon\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: vaafo_msgs/Lane\n"
"Header header\n"
"int32 lane_id\n"
"Waypoint[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: vaafo_msgs/Waypoint\n"
"std_msgs/Int8 lane\n"
"uint32  inx\n"
"geometry_msgs/PoseStamped pose\n"
"geometry_msgs/TwistStamped twist\n"
"geometry_msgs/PointStamped s_d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::vaafo_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vaafo_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state_id);
      stream.next(m.state);
      stream.next(m.target);
      stream.next(m.ego_car);
      stream.next(m.obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vaafo_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vaafo_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state_id);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "target: ";
    s << std::endl;
    Printer< ::vaafo_msgs::CarInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "ego_car: ";
    s << std::endl;
    Printer< ::vaafo_msgs::CarInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.ego_car);
    s << indent << "obstacle: ";
    s << std::endl;
    Printer< ::vaafo_msgs::DetectedObject_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VAAFO_MSGS_MESSAGE_STATE_H
